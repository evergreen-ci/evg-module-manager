[{"id":0,"href":"/getting-started/","title":"Getting Started","parent":"","content":"    Installation      Global Options      "},{"id":1,"href":"/getting-started/installation/","title":"Installation","parent":"Getting Started","content":"Prerequisites     To fully utilize this tool, the following commands need to be installed and available on your PATH:\n evergreen: The evergreen command line tool. git: Version 2.17 or higher gh: The github command line tool. pipx: Install python tools in isolated environments.  Evergreen authentication     Be sure to setup your .evergreen.yml configuration for authentication to evergreen. Details on ensure the evergreen cli is setup correctly can be found here.\nGithub authentication     Configure authentication to github with by running:\ngh auth login You can confirm authentication is configured corrected by running:\ngh auth status You should see output similar to the following:\ngithub.com ✓ Logged in to github.com as username (/Users/username/.config/gh/hosts.yml) ✓ Git operations for github.com configured to use ssh protocol. ✓ Token: ******************* Installing evg-module-manager     Use pipx to install the tool:\npipx install evg-module-manager Updating evg-module-manager     You can also use pipx to update to the latest version:\npipx upgrade evg-module-manager "},{"id":2,"href":"/subcommands/enable/","title":"Enable","parent":"Subcommands","content":"To enable a modules in your local repo, use the enable command. If the module code is not available locally, it will be cloned into the directory specified by the modules-dir option. Modules are enabled by adding a symlink to the cloned repository at the modules \u0026ldquo;prefix\u0026rdquo;.\n$ evg-module-manager enable --module wiredtiger "},{"id":3,"href":"/getting-started/global-options/","title":"Global Options","parent":"Getting Started","content":"Defining your evergreen project and module repository location     Note\nevg-module-manager expects to be run from the base directory of the repository for the evergreen project you are working with.  Most actions need to know 2 pieces of information: what evergreen project is being used and where to store module repos. There can be provided via command line options or via environment variables.\nBy default, modules will be stored in the parent directory (..) from where you are running the command and the \u0026lsquo;mongodb-mongo-master\u0026rsquo; project will be used.\nTo override the defaults via command line options, use the --evg-project and --modules-dir flags:\n$ evg-module-manager --evg-project mongodb-mongo-v5.0 --modules-dir ~/my_modules ... To override the defaults via environment variables, use EMM_EVG_PROJECT and EMM_MODULES_DIR.\n$ EMM_EVG_PROJECT=mongodb-mongo-v5.0 EMM_MODULES_DIR=~/mymodules evg-module-manager ... "},{"id":4,"href":"/subcommands/","title":"Subcommands","parent":"","content":"    List Modules      Enable      Disable      Create Branch      Patch      Pull Request      Commit Queue      "},{"id":5,"href":"/subcommands/disable/","title":"Disable","parent":"Subcommands","content":"You can disable a module with the disable command. This will remove the symlink, but leave the cloned repository.\n$ evg-module-manager disable --module wiredtiger "},{"id":6,"href":"/project-history/","title":"Project History","parent":"","content":"    Changelog      "},{"id":7,"href":"/subcommands/create-branch/","title":"Create Branch","parent":"Subcommands","content":"Use create-branch command to create a new branch on the base repo and any enabled modules. Use the --branch option to specify the name of the branch to create.\nTo create a branch named my-branch, use the following:\n$ evg-module-manager create-branch --branch my-branch By default, the branch will be created based on the currently checked out commit. You can use the --revision option to base the commit off a different revision.\nTo create a branch with the revision you want to start work with:\n$ evg-module-manager create-branch --branch my-branch --revision \u0026#34;revision_to_checkout\u0026#34; "},{"id":8,"href":"/subcommands/patch/","title":"Patch","parent":"Subcommands","content":"Creating an Evergreen patch build     Note\nIn order to create a patch build in Evergreen, you need to ensure the evergreen command line tool is available and configured. See Evergreen authenticationfor details.  The patch subcommand will create an evergreen patch build with changes to your base repository and any modules that are currently enabled. You can pass along any options that the evergreen patch command supports, however, the --skip_confirm and --project options are already specified by the tools are should not be included.\n$ evg-module-manager patch -d \u0026#34;my patch description\u0026#34; -u "},{"id":9,"href":"/subcommands/pull-request/","title":"Pull Request","parent":"Subcommands","content":"Creating github pull request     Note\nIn order to create pull requests in github, you need to sure the gh command line tool is available and authentication to github is configured. See Github authenticationfor details.  The pull-request subcommand will create pull requests across the base repo and all enabled modules.\nAfter local changes have been committed in all repos, you can create the pull request from the base repo, and all enabled modules with changes will create a separate pull request. Each pull request will have comments that contain links for all other modules' pull requests.\nTo create pull requests in base repo and all enabled modules:\n$ evg-module-manager pull-request By default, the pull request title and body will be determined based on the commits. To override these, the --title and --body options can be specified. If you provide the --body option, you must also provide a --title.\n$ evg-module-manager pull-request --title \u0026#34;my pull request title\u0026#34; --body \u0026#34;my pull request body\u0026#34; "},{"id":10,"href":"/subcommands/commit-queue/","title":"Commit Queue","parent":"Subcommands","content":"Submitting to the commit-queue     Note\nIn order to submit changes to the commit queue in Evergreen, you need to ensure the evergreen command line tool is available and configured. See Evergreen authenticationfor details.  The commit-queue subcommand will submit changes to the evergreen commit-queue that include changes to your base repository and any modules that are currently enabled. You can pass along any options that the evergreen commit-queue merge command supports, however, the --skip_confirm and --project options are already specified by the tools are should not be included.\n$ evg-module-manager commit-queue "},{"id":11,"href":"/","title":"","parent":"","content":"Evergreen Module Manager Documentation     evg-module-manager is a tool to help work with Evergreenmodules on your local workstation.\n"},{"id":12,"href":"/project-history/CHANGELOG/","title":"Changelog","parent":"Project History","content":"Changelog     0.2.0 - 2022-02-04      \u0026lsquo;pull-request\u0026rsquo; subcommand will now default to \u0026lsquo;\u0026ndash;fill\u0026rsquo; and validate arguments. \u0026lsquo;pull-request\u0026rsquo; will only add comments if there are multiple PRs being created.  0.1.10 - 2022-02-02      Support git version 2.17 Update Usage documentation.  0.1.9 - 2022-01-25      Add check for github CLI installation  0.1.8 - 2021-12-29      Add support for github pull request  0.1.7 - 2021-12-05      Add check for changelog updates  0.1.6 - 2021-11-29      Adding branching support  0.1.5 - 2021-11-24      Ability to create commits in enabled modules  0.1.4 - 2021-11-23      Add check to ensure version update  0.1.3 - 2021-11-16      Add support for evergreen test  0.1.2 - 2021-11-09      Add Apache-2.0 license  0.1.1 - 2021-11-08      Update project metadata  0.1.0 - 2021-11-08      Initial Release  "},{"id":13,"href":"/subcommands/list-modules/","title":"List Modules","parent":"Subcommands","content":"To see what modules are available for the current project, use the list-modules command:\n$ evg-modules-manager --evg-project sys-perf list-modules - enterprise - wtdevelop You can use the --show-details option to get more details about each module.\n$ evg-module-manager --evg-project mongodb-mongo-master list-modules --show-details - enterprise prefix: src/mongo/db/modules repo: git@github.com:10gen/mongo-enterprise-modules.git branch: master - wtdevelop prefix: src/third_party repo: git@github.com:wiredtiger/wiredtiger.git branch: develop You can also pass the --enabled option to only list modules which are currently active in your local repository.\n$ evg-module-manager --evg-project mongodb-mongo-master list-modules --enabled - wtdevelop "},{"id":14,"href":"/categories/","title":"Categories","parent":"","content":""},{"id":15,"href":"/tags/","title":"Tags","parent":"","content":""}]