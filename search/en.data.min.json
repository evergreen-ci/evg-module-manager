[{"id":0,"href":"/evg-module-manager/getting-started/","title":"Getting Started","parent":"","content":"    Installation      Global Options      "},{"id":1,"href":"/evg-module-manager/getting-started/installation/","title":"Installation","parent":"Getting Started","content":"Prerequisites     You\u0026rsquo;ll need an installation of Pythonon your computer. It needs to be version 3.7.1or higher.\nTo fully utilize this tool, the following commands also need to be installed and available on your PATH:\n evergreen: The evergreen command line tool. git: Version 2.17 or higher gh: The github command line tool. pipx: Install python tools in isolated environments.  Evergreen authentication     Be sure to setup your .evergreen.yml configuration for authentication to evergreen. Details on ensure the evergreen cli is setup correctly can be found here.\nGithub authentication     Configure authentication to github with by running:\ngh auth login You can confirm authentication is configured corrected by running:\ngh auth status You should see output similar to the following:\ngithub.com ✓ Logged in to github.com as username (/Users/username/.config/gh/hosts.yml) ✓ Git operations for github.com configured to use ssh protocol. ✓ Token: ******************* Installing evg-module-manager     Use pipx to install the tool:\npipx install evg-module-manager Updating evg-module-manager     You can also use pipx to update to the latest version:\npipx upgrade evg-module-manager "},{"id":2,"href":"/evg-module-manager/subcommands/enable/","title":"Enable","parent":"Subcommands","content":"To enable a modules in your local repo, use the enable command. If the module code is not available locally, it will be cloned into the directory specified by the modules-dir option. Modules are enabled by adding a symlink to the cloned repository at the modules \u0026ldquo;prefix\u0026rdquo;.\n$ evg-module-manager enable --module wiredtiger "},{"id":3,"href":"/evg-module-manager/workflows/project-setup/","title":"Project Setup","parent":"Workflows","content":"When you first start work on a change, you will want to enable any modules that you will be working with.\nYou can see what modules are available with the list-modules subcommand:\n$ evg-module-manager list-modules - enterprise - wtdevelop Then you can enable any modules you wish with the enable subcommand:\n$ evg-module-manager enable -m enterprise Note\nEnabling a module will attempt to checkout the module\u0026rsquo;s repository to the commit that was associated with the base commit in Evergreen.  Finally, you can verify that the module is active with the list-modules --enabled subcommand:\n$ evg-module-manager list-modules --enabled - enterprise What\u0026rsquo;s Next     Once all the modules you are working with have been enabled, you are ready to start making changes.\n"},{"id":4,"href":"/evg-module-manager/getting-started/global-options/","title":"Global Options","parent":"Getting Started","content":"Defining your evergreen project and module repository location     Note\nevg-module-manager expects to be run from the base directory of the repository for the evergreen project you are working with.  Most actions need to know 2 pieces of information: what evergreen project is being used and where to store module repos. These can be provided via command line options or via environment variables.\nBy default, modules will be stored in the parent directory (..) from where you are running the command and the \u0026lsquo;mongodb-mongo-master\u0026rsquo; project will be used.\nTo override the defaults via command line options, use the --evg-project and --modules-dir flags:\n$ evg-module-manager --evg-project mongodb-mongo-v5.0 --modules-dir ~/my_modules ... To override the defaults via environment variables, use EMM_EVG_PROJECT and EMM_MODULES_DIR.\n$ EMM_EVG_PROJECT=mongodb-mongo-v5.0 EMM_MODULES_DIR=~/mymodules evg-module-manager ... Remembering configuration     When working in a repository, it would be useful if evg-module-manager could remember which evergreen project was associated with the repository so that you don\u0026rsquo;t have to specify it every run. You can use a local configuration file to do this.\nA local configuration file is a file that lives in the directory that you are running evg-module-manager from and provides configuration options.\nThe file should be name .emm-local.yml and be in the yaml file format. evg-module-manager can automatically create the file for you with the save-local-config subcommand:\n$ evg-module-manager --evg-project=evg-module-manager save-local-config $ cat .emm-local.yml evg_project: evg-module-manager modules_directory: .. Any time the evg-module-manager is run in a directory with a .emm-local.yml file, the values in that files will be used for configuration.\n"},{"id":5,"href":"/evg-module-manager/subcommands/","title":"Subcommands","parent":"","content":"    List Modules      Enable      Disable      Git Branch Show      Git Branch Create      Git Branch Delete      Git Branch Switch      Git Branch Update      Git Branch Pull      Git Status      Git Add      Git Restore      Git Commit      Evg Patch      Evg Commit Queue      Pull Request      Save Local Config      "},{"id":6,"href":"/evg-module-manager/subcommands/disable/","title":"Disable","parent":"Subcommands","content":"You can disable a module with the disable command. This will remove the symlink, but leave the cloned repository.\n$ evg-module-manager disable --module wiredtiger "},{"id":7,"href":"/evg-module-manager/workflows/working-with-git/","title":"Working With Git","parent":"Workflows","content":"Once you have your project setupwith any enabled modules you want to work with, next you will want to create a branch to work on.\nCreating a branch to work on     You may want to run pull to get the latest changes for your base repository. In additional to pulling the latest changes, each enabled module will be checked out to the commit that was run with the latest commit in the base repo in evergreen.\n$ evg-module-manager git branch-pull Base: pulled to latest - enterprise: 07c4792479f85fb8af129a87ee6e116c4b7d7808 You can use the git branch-create subcommand to create a local branch across all the repositories:\n$ evg-module-manager git branch-create --branch dbradf/my-test-branch Branch \u0026#39;dbradf/my-test-branch\u0026#39; created on: - enterprise - base After your branch has been created, you can work on the branch and make whatever changes you wish. Once you are ready to make a commit, the following subcommand will help you.\nCommitting changes to git     First, you can see the status of all the modules with the git-status subcommand:\n$ evg-module-manager git status Status of enterprise: On branch dbradf/my-test-branch Changes not staged for commit: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to update what will be committed) (use \u0026#34;git restore \u0026lt;file\u0026gt;...\u0026#34; to discard changes in working directory) modified: README no changes added to commit (use \u0026#34;git add\u0026#34; and/or \u0026#34;git commit -a\u0026#34;) Status of base: On branch dbradf/my-test-branch Changes not staged for commit: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to update what will be committed) (use \u0026#34;git restore \u0026lt;file\u0026gt;...\u0026#34; to discard changes in working directory) modified: README.md no changes added to commit (use \u0026#34;git add\u0026#34; and/or \u0026#34;git commit -a\u0026#34;) Once you have checked that the changes look as expected, you can add any changes you wish to the staging area with the git add subcommand. Note that the add will be run against all modules. If you want to only add changes to a specific module, you will need to do that with manual git commands.\n$ evg-module-manager git add . Files added to enterprise. Files added to base. If we run the git status subcommand again, we can see that the changes are now staged to be committed:\n$ evg-module-manager git status Status of enterprise: On branch dbradf/my-test-branch Changes to be committed: (use \u0026#34;git restore --staged \u0026lt;file\u0026gt;...\u0026#34; to unstage) modified: README Status of base: On branch dbradf/my-test-branch Changes to be committed: (use \u0026#34;git restore --staged \u0026lt;file\u0026gt;...\u0026#34; to unstage) modified: README.md After your changes have been staged, you can use the git commit subcommand to create a new commit. NOTE\nYou can skip manually adding files by passing the --add flag to the git commit subcommand, this will use the same behavior as you get from git commit -a.  $ evg-module-manager git commit --message \u0026#34;My commit message\u0026#34; Commit created in the following modules: - enterprise - base Now your changes should be committed.\nWhat\u0026rsquo;s next     Now that your changes have your changes ready, you can send them to evergreen.\n"},{"id":8,"href":"/evg-module-manager/workflows/","title":"Workflows","parent":"","content":"    Project Setup      Working With Git      Staying Up to Date      Working With Evergreen      Creating Pull Requests      Cleaning Up      "},{"id":9,"href":"/evg-module-manager/workflows/staying-up-to-date/","title":"Staying Up to Date","parent":"Workflows","content":"After you have been working on a branch for some time, you will likely want to update your branch with the latest changes from the branch it was based on.\nUpdating your branch     The git branch-update subcommand will:\n fetch the latest changes from the origin of all the repositories. update your branch with the latest changes in the base repository. update all enabled modules up to the change associated with where the base repository was updated to.  $ evg-module-manager git branch-update Base: updated to latest \u0026#39;master\u0026#39; - enterprise: 07c4792479f85fb8af129a87ee6e116c4b7d7808 What\u0026rsquo;s next     Now that your changes have been updated, you can create a pull requestor send them to evergreen.\n"},{"id":10,"href":"/evg-module-manager/project-history/","title":"Project History","parent":"","content":"    Changelog      "},{"id":11,"href":"/evg-module-manager/subcommands/git-branch-show/","title":"Git Branch Show","parent":"Subcommands","content":"Use the git branch-show subcommand to see the local branch in the base repo and all modules. The currently checked out branch in each module will be preceded by an *.\n$ evg-module-manager git branch-show Branches in \u0026#39;enterprise\u0026#39;: dbradf/my-test-branch * master Branches in \u0026#39;base\u0026#39;: dbradf/my-test-branch * master "},{"id":12,"href":"/evg-module-manager/workflows/working-with-evergreen/","title":"Working With Evergreen","parent":"Workflows","content":"At some point, you will want to test your changes in Evergreen. You can use evg-module-manager to gather up changes to all your enabled modules and send them together.\nCreating Patch Builds     The evg patch subcommand will create a patch build with changes from your base repository and all enabled repositories.\nNote\nYou can pass any options supported by the evergreen patch tool to the evg-patch subcommand. See the evergreen docsfor more information  $ evg-module-manager evg patch -d \u0026#34;description of my patch\u0026#34; Patch Submitted: https://evergreen.mongodb.com/patch/620aba4f3627e05537c2f52e?redirect_spruce_users=true Submitting changes to the commit-queue     Once you are ready to merge you changes, you can send them all to the commit-queue with the evg commit-queue subcommand.\nNote\nYou can pass any options supported by the evergreen commit-queue merge tool to the evg-commit-queue subcommand. See the evergreen docsfor more information  $ evg-module-manager evg commit-queue What\u0026rsquo;s next     Now that your changes have been sent to evergreen, you can create a pull requestor clean up your finished branch.\n"},{"id":13,"href":"/evg-module-manager/subcommands/git-branch-create/","title":"Git Branch Create","parent":"Subcommands","content":"Use git branch-create subcommand to create a new branch on the base repo and any enabled modules. Use the --branch option to specify the name of the branch to create.\nTo create a branch named my-branch, use the following:\n$ evg-module-manager git branch-create --branch my-branch By default, the branch will be created based on the currently checked out commit. You can use the --revision option to base the commit off a different revision.\nThe command will display the branch that was created along with all the modules the branch was created on.\n$ evg-module-manager git branch-create --branch my-branch --revision \u0026#34;revision_to_checkout\u0026#34; Branch \u0026#39;dbradf/my-test-branch\u0026#39; created on: - enterprise - base "},{"id":14,"href":"/evg-module-manager/workflows/creating-pull-requests/","title":"Creating Pull Requests","parent":"Workflows","content":"Once you have your changes ready to share with others you can use evg-module-manager to create a Github Pull Request.\nCreating a Pull Request     The pull-request subcommand will create pull requests for the base repo and all modules that contain changes. If more than 1 pull request is created, a comment will be added to each pull request with links to the others.\nNOTE\nBy default the pull-request subcommand with use information from the git commits to determine the pull request title and body. If you would prefer, you can use the --title and --body options to specify the title and body yourself.  $ evg-module-manager pull-request What\u0026rsquo;s next     Now that your changes have been reviewed, you can send them to evergreen.\n"},{"id":15,"href":"/evg-module-manager/subcommands/git-branch-delete/","title":"Git Branch Delete","parent":"Subcommands","content":"Use git branch-delete subcommand to delete an existing branch in all modules. Use the --branch option to specify the name of the branch to delete.\nThe command will display the branch that was deleted along with all the modules the branch was created on.\n$ evg-module-manager git branch-delete --branch dbradf/my-test-branch Branch \u0026#39;dbradf/my-test-branch\u0026#39; delete from: - enterprise - base "},{"id":16,"href":"/evg-module-manager/subcommands/git-branch-switch/","title":"Git Branch Switch","parent":"Subcommands","content":"Use the git branch-switch subcommand to switch between branches. The --branch option allows you to specify the branch to switch to.\n$ evg-module-manager git branch-switch --branch master Switched to \u0026#39;master\u0026#39; in: - enterprise - base "},{"id":17,"href":"/evg-module-manager/subcommands/git-branch-update/","title":"Git Branch Update","parent":"Subcommands","content":"Use the git branch-update subcommand to update your current branch with the changes made remotely.\nThe git branch-update subcommand will:\n fetch the latest changes from the origin of all the repositories. update your branch with the latest changes in the base repository. update all enabled modules up to the change associated with where the base repository was updated to.  $ evg-module-manager git branch-update Base: updated to latest \u0026#39;master\u0026#39; - enterprise: 07c4792479f85fb8af129a87ee6e116c4b7d7808 "},{"id":18,"href":"/evg-module-manager/subcommands/git-branch-pull/","title":"Git Branch Pull","parent":"Subcommands","content":"Use git branch-pull subcommand to get the latest changes for your base repo and sync all modules to the latest commit of the base repo.\nNOTE Since Evergreen builds are only run against a single branch. You will only want to run this subcommand on the branch tracked by Evergreen.  The command will display the revision that each module to set to.\n$ evg-module-manager git branch-pull Base: pulled to latest - enterprise: 07c4792479f85fb8af129a87ee6e116c4b7d7808 "},{"id":19,"href":"/evg-module-manager/subcommands/git-status/","title":"Git Status","parent":"Subcommands","content":"The git status subcommand will display the current status of the base repository and the repository of all modules.\n$ evg-module-manager git status Status of enterprise: On branch dbradf/my-test-branch Changes to be committed: (use \u0026#34;git restore --staged \u0026lt;file\u0026gt;...\u0026#34; to unstage) modified: README Status of base: On branch dbradf/my-test-branch Changes to be committed: (use \u0026#34;git restore --staged \u0026lt;file\u0026gt;...\u0026#34; to unstage) modified: README.md "},{"id":20,"href":"/evg-module-manager/workflows/cleaning-up/","title":"Cleaning Up","parent":"Workflows","content":"Once your branch has been merged via the commit-queue, you will likely want to cleanup it up.\nSwitching to a selected branch     You cannot delete a branch you currently have checked out, so the first step to cleaning up the branch is to switch to a different branch. You can use the git branch-switch subcommand to change branches.\n$ evg-module-manager git branch-switch --branch master Switched to \u0026#39;master\u0026#39; in: - enterprise - base Deleting old branches     Once you no longer have the branch you wish to remove checked out, you can remove it. First, you can use the git branch-show subcommand to see the existing branches in each enabled repository.\n$ evg-module-manager git branch-show Branches in \u0026#39;enterprise\u0026#39;: dbradf/my-test-branch * master Branches in \u0026#39;base\u0026#39;: dbradf/my-test-branch * master Next, you can use the git branch-delete subcommand to remove the desired branch.\n$ evg-module-manager git branch-delete --branch dbradf/my-test-branch Branch \u0026#39;dbradf/my-test-branch\u0026#39; deleted from: - enterprise - base If you run the git branch-show subcommand again, you will see that the branch no longer shows up.\n$ evg-module-manager git branch-show Branches in \u0026#39;enterprise\u0026#39;: * master Branches in \u0026#39;base\u0026#39;: * master "},{"id":21,"href":"/evg-module-manager/subcommands/git-add/","title":"Git Add","parent":"Subcommands","content":"Adding files to git     The git add subcommand will add files to the staging area of all modules. The command will attempt to add files matching the given filespec in each module and display a list of modules in which files were added.\n$ evg-module-manager git add \u0026#34;.\u0026#34; Files added to enterprise. Files added to base. "},{"id":22,"href":"/evg-module-manager/subcommands/git-restore/","title":"Git Restore","parent":"Subcommands","content":"Restoring files in git     The git restore subcommand will restore files from the staging area of all modules. The command will attempt to restore files matching the given filespec in each module and display a list of modules in which files were restore.\n$ evg-module-manager git restore --staged \u0026#34;.\u0026#34; Files restored from enterprise. Files restored from base. "},{"id":23,"href":"/evg-module-manager/subcommands/git-commit/","title":"Git Commit","parent":"Subcommands","content":"Use the git commit subcommand to create a new commit with your changes. The commit will be created on all modules that contain committable changes. By default, this means changes that have been staged. You can use the --add flag to automatically include any changes to tracked files as part of the commit.\nIf you are creating a new commit, use the --message option to supply a commit message. If you would like to commit the changes to the previous commit, use the --amend flag instead.\nCreating a new commit:\n$ evg-module-manager git commit --message \u0026#34;My commit message\u0026#34; Commit created in the following modules: - enterprise - base Amending to a previous commit:\n$ evg-module-manager git commit --amend Commit amended in the following modules: - enterprise - base "},{"id":24,"href":"/evg-module-manager/subcommands/evg-patch/","title":"Evg Patch","parent":"Subcommands","content":"Creating an Evergreen patch build     Note\nIn order to create a patch build in Evergreen, you need to ensure the evergreen command line tool is available and configured. See Evergreen authenticationfor details.  The evg patch subcommand will create an evergreen patch build with changes to your base repository and any modules that are currently enabled. You can pass along any options that the evergreen patch command supports, however, the --skip_confirm and --project options are already specified by the tools and should not be included.\n$ evg-module-manager evg patch -d \u0026#34;my patch description\u0026#34; -u "},{"id":25,"href":"/evg-module-manager/subcommands/evg-commit-queue/","title":"Evg Commit Queue","parent":"Subcommands","content":"Submitting to the commit-queue     Note\nIn order to submit changes to the commit queue in Evergreen, you need to ensure the evergreen command line tool is available and configured. See Evergreen authenticationfor details.  The evg commit-queue subcommand will submit changes to the evergreen commit-queue that include changes to your base repository and any modules that are currently enabled. You can pass along any options that the evergreen commit-queue merge command supports, however, the --skip_confirm and --project options are already specified by the tools and should not be included.\n$ evg-module-manager evg commit-queue "},{"id":26,"href":"/evg-module-manager/subcommands/pull-request/","title":"Pull Request","parent":"Subcommands","content":"Creating github pull request     Note\nIn order to create pull requests in github, you need to sure the gh command line tool is available and authentication to github is configured. See Github authenticationfor details.  The pull-request subcommand will create pull requests across the base repo and all enabled modules.\nNote\nThis command will create a pull request against the origin repository in github. You can run git remote show origin to confirm this is the repository you would like to use.\n$ git remote show origin * remote origin Fetch URL: git@github.com:mongodb/mongo.git Push URL: git@github.com:mongodb/mongo.git HEAD branch: master Remote branches: ... You can change the origin repository with the git remote set-url origin \u0026lt;new_remote_url\u0026gt; command.\n After local changes have been committed in all repos, you can create the pull request from the base repo, and all enabled modules with changes will create a separate pull request. Each pull request will have comments that contain links for all other modules' pull requests.\nTo create pull requests in base repo and all enabled modules:\n$ evg-module-manager pull-request By default, the pull request title and body will be determined based on the commits. To override these, the --title and --body options can be specified. If you provide the --body option, you must also provide a --title.\n$ evg-module-manager pull-request --title \u0026#34;my pull request title\u0026#34; --body \u0026#34;my pull request body\u0026#34; "},{"id":27,"href":"/evg-module-manager/subcommands/save-local-config/","title":"Save Local Config","parent":"Subcommands","content":"The save-local-config subcommand will write a configuration file to the local directory that future executions of evg-module-manager run from the same directory can use to determine the configuration options to use.\n$ evg-module-manager save-local-config --help Usage: evg-module-manager save-local-config [OPTIONS] Save the given configuration options at \u0026#39;./.emm-local.yml\u0026#39;. When this file is present in the directory `evg-module-manager` is run from, the values defined in the file will be used. This allows you to run `evg-module-manager` without needing to specify global options every run. The supported option are: * evg_project * modules_directory Options: --help Show this message and exit. $ evg-module-manager --evg-project=evg-module-manager save-local-config $ cat .emm-local.yml evg_project: evg-module-manager modules_directory: .. "},{"id":28,"href":"/evg-module-manager/","title":"","parent":"","content":"Evergreen Module Manager Documentation     evg-module-manager is a tool to help work with Evergreenmodules on your local workstation.\n"},{"id":29,"href":"/evg-module-manager/project-history/CHANGELOG/","title":"Changelog","parent":"Project History","content":"Changelog     1.1.4 - 2022-03-31      Update documents to notify user set remote before pull-request  1.1.3 - 2022-03-28      Output message when no pull requests are being created.  1.1.2 - 2022-03-17      Set upstream when pushing a branch.  1.1.1 - 2022-03-10      Update documentation to call out Python 3.7.1 dependency.  1.1.0 - 2022-02-18      Add save-local-config subcommand. Support reading configuration from local file.  1.0.0 - 2022-02-17      Add several new git subcommands to support a more flexible workflow. Replace create-branch subcommand with git-branch-create subcommand. Replace update-branch subcommand with git-branch-update subcommand. Replace commit-queue subcommand with evg-commit-queue subcommand. Replace patch subcommand with evg-patch subcommand.  0.2.3 - 2022-02-16      Add support for Python 3.7  0.2.2 - 2022-02-14      Add documentation site.  0.2.1 - 2022-02-11      Fix create patch not configurable in Linux  0.2.0 - 2022-02-04      \u0026lsquo;pull-request\u0026rsquo; subcommand will now default to \u0026lsquo;\u0026ndash;fill\u0026rsquo; and validate arguments. \u0026lsquo;pull-request\u0026rsquo; will only add comments if there are multiple PRs being created.  0.1.10 - 2022-02-02      Support git version 2.17 Update Usage documentation.  0.1.9 - 2022-01-25      Add check for github CLI installation  0.1.8 - 2021-12-29      Add support for github pull request  0.1.7 - 2021-12-05      Add check for changelog updates  0.1.6 - 2021-11-29      Adding branching support  0.1.5 - 2021-11-24      Ability to create commits in enabled modules  0.1.4 - 2021-11-23      Add check to ensure version update  0.1.3 - 2021-11-16      Add support for evergreen test  0.1.2 - 2021-11-09      Add Apache-2.0 license  0.1.1 - 2021-11-08      Update project metadata  0.1.0 - 2021-11-08      Initial Release  "},{"id":30,"href":"/evg-module-manager/subcommands/list-modules/","title":"List Modules","parent":"Subcommands","content":"To see what modules are available for the current project, use the list-modules command:\n$ evg-modules-manager --evg-project sys-perf list-modules - enterprise - wtdevelop You can use the --show-details option to get more details about each module.\n$ evg-module-manager --evg-project mongodb-mongo-master list-modules --show-details - enterprise prefix: src/mongo/db/modules repo: git@github.com:10gen/mongo-enterprise-modules.git branch: master - wtdevelop prefix: src/third_party repo: git@github.com:wiredtiger/wiredtiger.git branch: develop You can also pass the --enabled option to only list modules which are currently active in your local repository.\n$ evg-module-manager --evg-project mongodb-mongo-master list-modules --enabled - wtdevelop "},{"id":31,"href":"/evg-module-manager/categories/","title":"Categories","parent":"","content":""},{"id":32,"href":"/evg-module-manager/tags/","title":"Tags","parent":"","content":""}]