<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Evergreen Module Manager Documentation</title>
    <link>https://evergreen-ci.github.io/evg-module-manager/</link>
    <description>Recent content on Evergreen Module Manager Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://evergreen-ci.github.io/evg-module-manager/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/getting-started/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/getting-started/installation/</guid>
      <description>Prerequisites     You&amp;rsquo;ll need an installation of Pythonon your computer. It needs to be version 3.7.1or higher.
To fully utilize this tool, the following commands also need to be installed and available on your PATH:
 evergreen: The evergreen command line tool. git: Version 2.17 or higher gh: The github command line tool. pipx: Install python tools in isolated environments.  Evergreen authentication     Be sure to setup your .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/subcommands/enable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/subcommands/enable/</guid>
      <description>To enable a modules in your local repo, use the enable command. If the module code is not available locally, it will be cloned into the directory specified by the modules-dir option. Modules are enabled by adding a symlink to the cloned repository at the modules &amp;ldquo;prefix&amp;rdquo;.
$ evg-module-manager enable --module wiredtiger </description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/workflows/project-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/workflows/project-setup/</guid>
      <description>When you first start work on a change, you will want to enable any modules that you will be working with.
You can see what modules are available with the list-modules subcommand:
$ evg-module-manager list-modules - enterprise - wtdevelop Then you can enable any modules you wish with the enable subcommand:
$ evg-module-manager enable -m enterprise Note
Enabling a module will attempt to checkout the module&amp;rsquo;s repository to the commit that was associated with the base commit in Evergreen.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/getting-started/global-options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/getting-started/global-options/</guid>
      <description>Defining your evergreen project and module repository location     Note
evg-module-manager expects to be run from the base directory of the repository for the evergreen project you are working with.  Most actions need to know 2 pieces of information: what evergreen project is being used and where to store module repos. These can be provided via command line options or via environment variables.
By default, modules will be stored in the parent directory (.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/subcommands/disable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/subcommands/disable/</guid>
      <description>You can disable a module with the disable command. This will remove the symlink, but leave the cloned repository.
$ evg-module-manager disable --module wiredtiger </description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/workflows/working-with-git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/workflows/working-with-git/</guid>
      <description>Once you have your project setupwith any enabled modules you want to work with, next you will want to create a branch to work on.
Creating a branch to work on     You may want to run pull to get the latest changes for your base repository. In additional to pulling the latest changes, each enabled module will be checked out to the commit that was run with the latest commit in the base repo in evergreen.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/workflows/staying-up-to-date/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/workflows/staying-up-to-date/</guid>
      <description>After you have been working on a branch for some time, you will likely want to update your branch with the latest changes from the branch it was based on.
Updating your branch     The git branch-update subcommand will:
 fetch the latest changes from the origin of all the repositories. update your branch with the latest changes in the base repository. update all enabled modules up to the change associated with where the base repository was updated to.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/subcommands/git-branch-show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/subcommands/git-branch-show/</guid>
      <description>Use the git branch-show subcommand to see the local branch in the base repo and all modules. The currently checked out branch in each module will be preceded by an *.
$ evg-module-manager git branch-show Branches in &amp;#39;enterprise&amp;#39;: dbradf/my-test-branch * master Branches in &amp;#39;base&amp;#39;: dbradf/my-test-branch * master </description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/workflows/working-with-evergreen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/workflows/working-with-evergreen/</guid>
      <description>At some point, you will want to test your changes in Evergreen. You can use evg-module-manager to gather up changes to all your enabled modules and send them together.
Creating Patch Builds     The evg patch subcommand will create a patch build with changes from your base repository and all enabled repositories.
Note
You can pass any options supported by the evergreen patch tool to the evg-patch subcommand.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/subcommands/git-branch-create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/subcommands/git-branch-create/</guid>
      <description>Use git branch-create subcommand to create a new branch on the base repo and any enabled modules. Use the --branch option to specify the name of the branch to create.
To create a branch named my-branch, use the following:
$ evg-module-manager git branch-create --branch my-branch By default, the branch will be created based on the currently checked out commit. You can use the --revision option to base the commit off a different revision.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/workflows/creating-pull-requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/workflows/creating-pull-requests/</guid>
      <description>Once you have your changes ready to share with others you can use evg-module-manager to create a Github Pull Request.
Creating a Pull Request     The pull-request subcommand will create pull requests for the base repo and all modules that contain changes. If more than 1 pull request is created, a comment will be added to each pull request with links to the others.
NOTE
By default the pull-request subcommand with use information from the git commits to determine the pull request title and body.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/subcommands/git-branch-delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/subcommands/git-branch-delete/</guid>
      <description>Use git branch-delete subcommand to delete an existing branch in all modules. Use the --branch option to specify the name of the branch to delete.
The command will display the branch that was deleted along with all the modules the branch was created on.
$ evg-module-manager git branch-delete --branch dbradf/my-test-branch Branch &amp;#39;dbradf/my-test-branch&amp;#39; delete from: - enterprise - base </description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/subcommands/git-branch-switch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/subcommands/git-branch-switch/</guid>
      <description>Use the git branch-switch subcommand to switch between branches. The --branch option allows you to specify the branch to switch to.
$ evg-module-manager git branch-switch --branch master Switched to &amp;#39;master&amp;#39; in: - enterprise - base </description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/subcommands/git-branch-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/subcommands/git-branch-update/</guid>
      <description>Use the git branch-update subcommand to update your current branch with the changes made remotely.
The git branch-update subcommand will:
 fetch the latest changes from the origin of all the repositories. update your branch with the latest changes in the base repository. update all enabled modules up to the change associated with where the base repository was updated to.  $ evg-module-manager git branch-update Base: updated to latest &amp;#39;master&amp;#39; - enterprise: 07c4792479f85fb8af129a87ee6e116c4b7d7808 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/subcommands/git-branch-pull/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/subcommands/git-branch-pull/</guid>
      <description>Use git branch-pull subcommand to get the latest changes for your base repo and sync all modules to the latest commit of the base repo.
NOTE Since Evergreen builds are only run against a single branch. You will only want to run this subcommand on the branch tracked by Evergreen.  The command will display the revision that each module to set to.
$ evg-module-manager git branch-pull Base: pulled to latest - enterprise: 07c4792479f85fb8af129a87ee6e116c4b7d7808 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/subcommands/git-status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/subcommands/git-status/</guid>
      <description>The git status subcommand will display the current status of the base repository and the repository of all modules.
$ evg-module-manager git status Status of enterprise: On branch dbradf/my-test-branch Changes to be committed: (use &amp;#34;git restore --staged &amp;lt;file&amp;gt;...&amp;#34; to unstage) modified: README Status of base: On branch dbradf/my-test-branch Changes to be committed: (use &amp;#34;git restore --staged &amp;lt;file&amp;gt;...&amp;#34; to unstage) modified: README.md </description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/workflows/cleaning-up/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/workflows/cleaning-up/</guid>
      <description>Once your branch has been merged via the commit-queue, you will likely want to cleanup it up.
Switching to a selected branch     You cannot delete a branch you currently have checked out, so the first step to cleaning up the branch is to switch to a different branch. You can use the git branch-switch subcommand to change branches.
$ evg-module-manager git branch-switch --branch master Switched to &amp;#39;master&amp;#39; in: - enterprise - base Deleting old branches     Once you no longer have the branch you wish to remove checked out, you can remove it.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/subcommands/git-add/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/subcommands/git-add/</guid>
      <description>Adding files to git     The git add subcommand will add files to the staging area of all modules. The command will attempt to add files matching the given filespec in each module and display a list of modules in which files were added.
$ evg-module-manager git add &amp;#34;.&amp;#34; Files added to enterprise. Files added to base. </description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/subcommands/git-restore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/subcommands/git-restore/</guid>
      <description>Restoring files in git     The git restore subcommand will restore files from the staging area of all modules. The command will attempt to restore files matching the given filespec in each module and display a list of modules in which files were restore.
$ evg-module-manager git restore --staged &amp;#34;.&amp;#34; Files restored from enterprise. Files restored from base. </description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/subcommands/git-commit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/subcommands/git-commit/</guid>
      <description>Use the git commit subcommand to create a new commit with your changes. The commit will be created on all modules that contain committable changes. By default, this means changes that have been staged. You can use the --add flag to automatically include any changes to tracked files as part of the commit.
If you are creating a new commit, use the --message option to supply a commit message. If you would like to commit the changes to the previous commit, use the --amend flag instead.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/subcommands/evg-patch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/subcommands/evg-patch/</guid>
      <description>Creating an Evergreen patch build     Note
In order to create a patch build in Evergreen, you need to ensure the evergreen command line tool is available and configured. See Evergreen authenticationfor details.  The evg patch subcommand will create an evergreen patch build with changes to your base repository and any modules that are currently enabled. You can pass along any options that the evergreen patch command supports, however, the --skip_confirm and --project options are already specified by the tools and should not be included.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/subcommands/evg-commit-queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/subcommands/evg-commit-queue/</guid>
      <description>Submitting to the commit-queue     Note
In order to submit changes to the commit queue in Evergreen, you need to ensure the evergreen command line tool is available and configured. See Evergreen authenticationfor details.  The evg commit-queue subcommand will submit changes to the evergreen commit-queue that include changes to your base repository and any modules that are currently enabled. You can pass along any options that the evergreen commit-queue merge command supports, however, the --skip_confirm and --project options are already specified by the tools and should not be included.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/subcommands/pull-request/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/subcommands/pull-request/</guid>
      <description>Creating github pull request     Note
In order to create pull requests in github, you need to sure the gh command line tool is available and authentication to github is configured. See Github authenticationfor details.  The pull-request subcommand will create pull requests across the base repo and all enabled modules.
After local changes have been committed in all repos, you can create the pull request from the base repo, and all enabled modules with changes will create a separate pull request.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/subcommands/save-local-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/subcommands/save-local-config/</guid>
      <description>The save-local-config subcommand will write a configuration file to the local directory that future executions of evg-module-manager run from the same directory can use to determine the configuration options to use.
$ evg-module-manager save-local-config --help Usage: evg-module-manager save-local-config [OPTIONS] Save the given configuration options at &amp;#39;./.emm-local.yml&amp;#39;. When this file is present in the directory `evg-module-manager` is run from, the values defined in the file will be used. This allows you to run `evg-module-manager` without needing to specify global options every run.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/project-history/CHANGELOG/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/project-history/CHANGELOG/</guid>
      <description>Changelog     1.1.3 - 2022-03-28      Output message when no pull requests are being created.  1.1.2 - 2022-03-17      Set upstream when pushing a branch.  1.1.1 - 2022-03-10      Update documentation to call out Python 3.7.1 dependency.  1.1.0 - 2022-02-18      Add save-local-config subcommand. Support reading configuration from local file.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://evergreen-ci.github.io/evg-module-manager/subcommands/list-modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://evergreen-ci.github.io/evg-module-manager/subcommands/list-modules/</guid>
      <description>To see what modules are available for the current project, use the list-modules command:
$ evg-modules-manager --evg-project sys-perf list-modules - enterprise - wtdevelop You can use the --show-details option to get more details about each module.
$ evg-module-manager --evg-project mongodb-mongo-master list-modules --show-details - enterprise prefix: src/mongo/db/modules repo: git@github.com:10gen/mongo-enterprise-modules.git branch: master - wtdevelop prefix: src/third_party repo: git@github.com:wiredtiger/wiredtiger.git branch: develop You can also pass the --enabled option to only list modules which are currently active in your local repository.</description>
    </item>
    
  </channel>
</rss>
